services:
  mysql:
    image: mysql:8.0 # MySQL 8.0 이미지 사용
    container_name: mysql
    environment:
      MYSQL_ROOT_PASSWORD: rootpassword # 루트 비밀번호
      MYSQL_DATABASE: mydatabase # 기본 DB 이름 (컨테이너 시작 시 자동 생성)
      MYSQL_USER: user # 사용자 이름
      MYSQL_PASSWORD: password # 사용자 비밀번호
    ports:
      - "3306:3306" # 호스트/컨테이너 포트 매핑
    networks:
      - app-network
    volumes: # mysql-data 라는 볼륨을 MySQL 컨테이너의 /var/lib/mysql 디렉토리에 마운트
      - mysql-data:/var/lib/mysql  # 데이터 영속성 설정
      - ./repository/src/main/resources/schema.sql:/docker-entrypoint-initdb.d/1_schema.sql
      - ./repository/src/main/resources/data.sql:/docker-entrypoint-initdb.d/2_data.sql

  redis:
    image: redis:6.2 # Redis 6.2 이미지
    container_name: redis # Redis 컨테이너 이름 지정 (redis)
    restart: always # Redis 서비스가 실패한 경우 자동으로 다시 시작
    ports:
      - "6379:6379" # 호스트/컨테이너 포트 매핑
    networks:
      - app-network # app-network 네트워크 연결
    healthcheck:
      test: "redis-cli -h localhost ping"
      interval: 10s
      retries: 5
      start_period: 30s

  mongodb:
    image: mongo:4.4 # mongo:4.4 이미지 사용
    container_name: mongodb # MongoDB 컨테이너의 이름 지정 (mongodb)
    restart: always # MongoDB 서비스가 실패한 경우 자동으로 다시 시작
    command: ["--noauth"]  # 인증 비활성화
    ports:
      - "27017:27017" # 호스트/컨테이너 포트 매핑
    networks:
      - app-network # app-network 네트워크 연결
    healthcheck: # MongoDB가 정상적으로 실행되고 있는지 확인
      test: echo 'db.runCommand("ping").ok' | mongosh mongodb://localhost:27017/admin --quiet
      interval: 10s # 10초마다 ping 명령 실행
      retries: 5 # 5번 재시도 (실패 시, 컨테이너 상태 : unhealthy)
      start_period: 30s

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper
    restart: always
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
    ports:
      - "2181:2181"
    networks:
      - app-network

  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: kafka
    restart: always
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
    networks:
      - app-network

  internal-api:
    build:
      context: ./internal-api # ./internal-api 디렉터리에서 Docker 이미지 빌드
    container_name: internal-api # 컨테이너의 이름을 지정 (internal-api)
    ports:
      - "8089:8089" # 호스트/컨테이너 포트 매핑
    restart: always # 서비스가 실패할 경우 자동으로 재시작
    depends_on: # mongodb, redis 서비스 실행 후 internal-api 실행
      - mongodb
      - redis
    networks:
      - app-network # app-network 네트워크 연결
    environment:
      SPRING_DATASOURCE_URL: jdbc:mysql://mysql:3306/mydatabase?allowPublicKeyRetrieval=true&useSSL=false
      SPRING_DATASOURCE_USERNAME: user
      SPRING_DATASOURCE_PASSWORD: password
      SPRING_REDIS_HOST: redis
      SPRING_REDIS_PORT: 6379
      SPRING_DATA_MONGODB_URI: mongodb://mongodb:27017/admin # Spring Boot 애플리케이션 MongoDB 연결

  external-api:
    build:
      context: ./external-api
    container_name: external-api
    restart: always
    ports:
      - "8081:8081"
    depends_on:
      - mongodb
      - redis
    networks:
      - app-network
    environment:
      SPRING_DATASOURCE_URL: jdbc:mysql://mysql:3306/mydatabase?allowPublicKeyRetrieval=true&useSSL=false
      SPRING_DATASOURCE_USERNAME: user
      SPRING_DATASOURCE_PASSWORD: password
      SPRING_REDIS_HOST: redis
      SPRING_REDIS_PORT: 6379
      SPRING_DATA_MONGODB_URI: mongodb://mongodb:27017/admin

networks:
  app-network:
    driver: bridge # 서비스들이 동일한 네트워크에서 서로 통신할 수 있도록 설정 (기본 Docker 네트워크 구성)

volumes:
  mysql-data:
    driver: local  # MySQL 데이터 영속성 설정